{
	"c++ solve": {
		"prefix": "solve",
		"scope": "cpp",
		"body": [
		"// https://github.com/Pentagon03/Algorithms",
		"// g++ -std=c++20 -D _DEBUG",
		"#ifdef _DEBUG",
		"#define Pentagon03",
		"#include<Pentagon03/debug.h>",
		"#else",
		"#define dbg(...)",
		"#define dbgArr(...)",
		"#endif",
		"#pragma GCC optimize(\"Ofast\", \"unroll-loops\")",
		"// #pragma GCC target(\"avx2\", \"popcnt\")",
		"#include\"bits/stdc++.h\"",
		"// put ext headers here: ext/pb_ds/assoc_container.hpp, tr2/dynamic_bitset",
		"using namespace std;",
		"template<typename T> istream& operator>> (istream&in, vector<T>&v){for(auto&x:v)in>>x; return in;}",
		"template<typename T> ostream& operator<< (ostream&out, vector<T>&v){for(auto&x:v)out<<x<<' '; return out;}",
		"template<typename T> T randint(T l, T r) {static std::mt19937_64 gen(chrono::steady_clock::now().time_since_epoch().count()); return std::uniform_int_distribution<T>(l,r)(gen);}",
		"#define all(v) (v).begin(),(v).end()",
		"#define nl '\\n'",
		"#define sp ' '",
		"#define int int64_t",
		"using ll = int64_t; using pii = pair<int,int>; int cur_tc;",
		"constexpr int inf = (int) 1e9 + 3; constexpr ll infl = (ll) 1e18 + 3;",
		"",
		"",
		"int32_t main(){",
		"    cin.tie(0)->sync_with_stdio(0); cin.exceptions(ios::badbit | ios::failbit);",
		"    // cout<<fixed<<setprecision(15);",
		"    int tc = 1;",
		"    cin >> tc;",
		"    auto solve_tc = [&](){",
		"        $0",
		"    };",
		"    for(cur_tc=1;cur_tc<=tc;cur_tc++) solve_tc();",
		"    return 0;",
		"}"
		],
		"description": "c++ solve"
	},
	"print": {
    "prefix": "print",
		"body": [
			"/** print function that can print any element or iterable",
			" * https://github.com/Pentagon03/Algorithms/blob/master/Etc/simple_print.cpp",
			" * source: pentagon03, idea: swoon",
			" * set 'debug_ = 1' to change from cout to cerr",
			" * Note: ONLY printing (iterables of iterables) will print '\\n' at the end",
			" * example",
			" * vector<vector<int>> v = {{1,2,3}, {3,4,5}, {5,6,7}};",
			" * int a = 3; double b = 3.14; string c = \"asdf\";",
			" * print(\"wow\", v, a, b, c);",
			" */",
			"constexpr bool debug_ = 0;",
			"",
			"template<class T>",
			"void print(T &&v) { (debug_?cerr:cout) << forward<T>(v); }",
			"",
			"template <class T>",
			"concept is_string = ",
			"    is_same_v<remove_cvref_t<T>, string> ||",
			"    is_same_v<decay_t<T>, char*> || ",
			"    is_same_v<decay_t<T>, const char*>;",
			"",
			"template <class T>",
			"concept is_iterable = requires(T &&x) { begin(x); end(x); } && !is_string<T>;",
			"",
			"template<is_iterable T>",
			"void print(T &&container) {",
			"    for (auto &&element : container) {",
			"        using E = decltype(element);",
			"        print(forward<E>(element));",
			"        print(is_iterable<E> ? '\\n': ' ');",
			"    }",
			"}",
			"",
			"template<class T, class... Args>",
			"void print(T &&v, Args &&...args) {",
			"    print(forward<T>(v)); ",
			"    print(' ');",
			"    print(forward<Args>(args)...);",
			"}"
		],
		"description": "print"
	},
	"c++ debug": {
		"prefix": "debug",
		"scope": "cpp",
		"body": [
		"// g++ -std=c++20 -D _DEBUG",
		"#ifdef _DEBUG",
		"#define Pentagon03",
		"#include<Pentagon03/debug.h>",
		"#else",
		"#define dbg(...) ",
		"#define dbgArr(...)",
		"#endif",
		],
		"description": "c++ debug"
	},
	"simple debug": {
		"prefix": "simdbg",
		"body": [
			"#ifndef ONLINE_JUDGE",
			"#define gg(...) [](const auto&...x){ \\",
			"char c='='; cerr<<#__VA_ARGS__<<\" \"; ((cerr<<exchange(c,',')<<\" \"<<x),...); cerr<<endl;\\",
			"}(__VA_ARGS__);",
			"#else",
			"#define gg(...)",
			"#endif"
		],
		"description": "simple debug snippet"
	},
	"simple c++ template": {
		"prefix": "simple",
		"scope": "cpp",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"#define sp ' '",
			"#define nl '\\n'",
			"#define all(v) (v).begin(), (v).end()",
			"#define int long long",
			"using ll = long long;",
			"",
			"void solve(int cur_tc){",
			"    $0",
			"}",
			"",
			"signed main(){",
			"    cin.tie(0)->sync_with_stdio(0); cin.exceptions(ios::badbit | ios::failbit);",
			"    int tc = 1;",
			"    // cin>>tc;",
			"    for(int i=1;i<=tc;i++) solve(i);",
			"}"
		],
		"description": "simple template"
	},
	"custom vector": {
		"prefix": "myvec",
		"body": [
			"template <int D, typename T>",
			"struct Vec : public vector<Vec<D - 1, T>> {",
			"    static_assert(D >= 1, \"Dimension must be positive\");",
			"    template <typename... Args>",
			"    Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {}",
			"};",
			"",
			"template <typename T>",
			"struct Vec<1, T> : public vector<T> {",
			"    Vec(int n = 0, T val = T()) : std::vector<T>(n, val) {}",
			"};",
			"",
			"/* Example",
			"    Vec<4, int64_t> f(n, k, 2, 2); // = f[n][k][2][2];",
			"    Vec<2, int> adj(n); // graph",
			"*/",
			"$0",
		],
		"description": "custom vector"
	},
	"binary search": {
	"prefix": "bisect",
	"scope": "cpp",
	"body": [
		"auto chk = [&](auto x)->bool{",
		"",
		"};",
		"int lo = $0; // False",
		"int hi = ; // True",
		"while(lo + 1 < hi){",
		"    auto mid = (lo + hi) / 2;",
		"    if(chk(mid)) hi = mid;",
		"    else lo = mid;",
		"}"
	],
	"description": "binary search"
	},
	"solve old": {
		"prefix": "solve_old",
		"scope": "cpp",
		"body": [
			"#define LLHACK",
			"/*Solution",
			"Problem: ${TM_FILENAME_BASE}",
			"1. 문제부터 정확히 읽는다.",
			"2. 수단과 방법을 가리지 말고 문제를 먼저 맞춘다",
			"3. 잘 안되면 세수라도 하고 오거나 stress test를 짠다.",
			"화이팅",
			"*/",
			"#pragma GCC optimize(\"Ofast,unroll-loops\")",
			"#include\"bits/stdc++.h\"",
			"using namespace std;",
			"int cur_tc;",
			"#define nl '\\n'",
			"#define sp ' '",
			"#define dbg(i) cerr<<#i<<sp<<i<<endl",
			"#define dbgs(...) fprintf(stderr, __VA_ARGS__)",
			"#define all(v) (v).begin(),(v).end()",
			"#define init(v, x) memset(v, x, sizeof v)",
			"using ld = long double;",
			"using ll = long long;",
			"#ifdef LLHACK",
			"#define int ll",
			"#endif",
			"using pii = pair<int,int>;",
			"// __builtin_ctzll(x), __builtin_clzll(x), __builtin_popcountll(x)",
			"int lsb(int x){return x>0?__builtin_ctz(x):-1;}",
			"int msb(int x){return x>0?31-__builtin_clz(x):-1;}",
			"int popcnt(int x){return __builtin_popcount(x);}",
			"std::mt19937_64 gen(time(NULL));",
			"ll randint(ll l, ll r) { std::uniform_int_distribution<ll> dist(l, r); return dist(gen);}",
			"template<class T1,class T2>bool updmax(T1&l,T2 r){return (l<r?(l=r),true: false);}",
			"template<class T1,class T2>bool updmin(T1&l,T2 r){return (l>r?(l=r),true: false);}",
			"const int inf = (int)1e9 + 7;",
			"const ll linf = (ll)4e18 + 7;",
			"",
			"/*요약: 문제의 본질을 본다",
			"$0",
			"*/",
			"const int N = 7 + 1e5, mod = (int)1e9 + 7;",
			"",
			"void _main(){",
			"    ",
			"}",
			"",
			"signed main(){",
			"    cin.tie(0)->sync_with_stdio(0);",
			"    cin.exceptions(ios::badbit | ios::failbit);",
			"    // cout<<fixed<<setprecision(15);",
			"    int tc = 1;",
			"    // cin >> tc;",
			"    for(cur_tc=1;cur_tc<=tc;++cur_tc) _main();",
			"    return 0;",
			"}",
			"// https://github.com/Pentagon03/Algorithms",
		],
		"description": "solve"
	},
	"C++ vectorization (ofast)": {
		"prefix": "ofast",
		"scope": "cpp",
		"body": [
			"#pragma GCC optimize(3)",
			"#pragma GCC optimize(\"Ofast,unroll-loops\")",
			"#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt\")"
		],
		"description": "C++ vectorization"
	},
	"stack pregma hack": {
		"prefix": "stackpragma",
		"scope": "cpp",
		"body": [
			"#pragma comment(linker, \"/stack:102400000,102400000\")"
		],
		"description": "C++ vectorization"
	},
	"stack hack": {
		"prefix": "stackhack",
		"scope":"cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"void main_() {",
			"    // implement your solution here",
			"}",
			"static void run_with_stack_size(void (*func)(void), size_t stsize) {",
			"    char *stack, *send;",
			"    stack = (char *)malloc(stsize);",
			"    send = stack + stsize - 16;",
			"    send = (char *)((uintptr_t)send / 16 * 16);",
			"    asm volatile(",
			"        \"mov %%rsp, (%0)\\n\"",
			"        \"mov %0, %%rsp\\n\"",
			"        :",
			"        : \"r\"(send));",
			"    func();",
			"    asm volatile(\"mov (%0), %%rsp\\n\" : : \"r\"(send));",
			"    free(stack);",
			"}",
			"int main() {",
			"    run_with_stack_size(main_, 1024 * 1024 * 1024); // run with a 1 GiB stack",
			"    return 0;",
			"}"
		],
		"description": "stack hack"
	},
	"Python solve": {
		"prefix": "solve",
		"scope": "python",
		"body": [
			"from sys import stdin, stdout, exit",
			"rs = lambda:stdin.readline().rstrip()",
			"ri = lambda:int(rs())",
			"rl = lambda:list(map(int,rs().split()))",
			"rll = lambda n: [ri() for _ in range(n)]",
			"pr = lambda x:stdout.write(str(x)+'\\n')",
			"inf = 10**9",
			"mod = 10**9 + 7",
			"",
			"'''Solution",
			"${0}",
			"'''",
			"",
			"def solve():",
			"    ",
			"    return",
			"",
			"def main():",
			"    TC = 1 ",
			"    TC = ri()",
			"    for _ in range(TC):",
			"        solve()",
			"",
			"if __name__ == \"__main__\":",
			"    main()"
		],
		"description": "Python solve"
	},
	"grader": {
		"prefix": "grader",
		"scope": "python",
		"body": [
			"import os",
			"i = 1",
			"while True:",
			"    print(i)",
			"    file_name = \"\"",
			"    if os.system(f'.\\\\{file_name}_gen {i} > {file_name}_in'): break",
			"    if os.system(f'.\\\\{file_name} < {file_name}_in > {file_name}_my'): break",
			"    if os.system(f'.\\\\{file_name}_ok < {file_name}_in > {file_name}_you'): break",
			"    if open(f'{file_name}_my').read() != open(f'{file_name}_you').read():",
			"        break",
			"    i += 1"
		],
		"description": "grader"
	},
}