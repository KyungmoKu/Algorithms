{
	"c++ solve": {
	"prefix": "solve",
	"scope": "cpp",
	"body": [
    "#ifndef ONLINE_JUDGE",
    "#define Pentagon03",
    "#include<Pentagon03/debug.h>",
    "#else",
    "#define dbg(...) ",
    "#define dbgArr(...)",
    "#endif",
    "",
    "#pragma GCC optimize(\"Ofast,unroll-loops\")",
    "#include\"bits/stdc++.h\"",
    "using namespace std;",
    "using ll = int64_t; int cur_tc;",
    "template<typename T> istream& operator>> (istream&in, vector<T>&v){for(auto&x:v)in>>x; return in;}",
    "#define ALL(v) (v).begin(),(v).end()",
    "#define INIT(v, x) memset(v, x, sizeof v)",
    "#define nl '\\n'",
    "#define sp ' '",
    "#define int ll",
    "",
    "",
    "int32_t main(){",
    "    cin.tie(0)->sync_with_stdio(0); cin.exceptions(ios::badbit | ios::failbit);",
    "    // cout<<fixed<<setprecision(15);",
    "    int tc = 1;",
    "    cin >> tc;",
    "    auto solve_tc = [&](){",
    "        $0",
    "    };",
    "    for(cur_tc=1;cur_tc<=tc;cur_tc++) solve_tc();",
    "    return 0;",
    "}"
	],
	"description": "c++ solve"
	},
	"custom vector": {
	"prefix": "myvec",
	"body": [
		"template <int D, typename T>",
		"struct Vec : public vector<Vec<D - 1, T>> {",
		"    static_assert(D >= 1, \"Dimension must be positive\");",
		"    template <typename... Args>",
		"    Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {}",
		"};",
		"",
		"template <typename T>",
		"struct Vec<1, T> : public vector<T> {",
		"    Vec(int n = 0, T val = T()) : std::vector<T>(n, val) {}",
		"};",
		"",
		"/* Example",
		"    Vec<4, int64_t> f(n, k, 2, 2); // = f[n][k][2][2];",
		"    Vec<2, int> adj(n); // graph",
		"*/"
	],
	"description": "custom vector"
	},
	"solve": {
		"prefix": "solve_old",
		"scope": "cpp",
		"body": [
		  "#define LLHACK",
		  "/*Solution",
		  "Problem: ${TM_FILENAME_BASE}",
		  "1. 문제부터 정확히 읽는다.",
		  "2. 수단과 방법을 가리지 말고 문제를 먼저 맞춘다",
		  "3. 잘 안되면 세수라도 하고 오거나 stress test를 짠다.",
		  "화이팅",
		  "*/",
		  "#pragma GCC optimize(\"Ofast,unroll-loops\")",
		  "#include\"bits/stdc++.h\"",
		  "using namespace std;",
		  "int cur_tc;",
		  "#define nl '\\n'",
		  "#define sp ' '",
		  "#define dbg(i) cerr<<#i<<sp<<i<<endl",
		  "#define dbgs(...) fprintf(stderr, __VA_ARGS__)",
		  "#define all(v) (v).begin(),(v).end()",
		  "#define init(v, x) memset(v, x, sizeof v)",
		  "using ld = long double;",
		  "using ll = long long;",
		  "#ifdef LLHACK",
		  "#define int ll",
		  "#endif",
		  "using pii = pair<int,int>;",
		  "// __builtin_ctzll(x), __builtin_clzll(x), __builtin_popcountll(x)",
		  "int lsb(int x){return x>0?__builtin_ctz(x):-1;}",
		  "int msb(int x){return x>0?31-__builtin_clz(x):-1;}",
		  "int popcnt(int x){return __builtin_popcount(x);}",
		  "std::mt19937_64 gen(time(NULL));",
		  "ll randint(ll l, ll r) { std::uniform_int_distribution<ll> dist(l, r); return dist(gen);}",
		  "template<class T1,class T2>bool updmax(T1&l,T2 r){return (l<r?(l=r),true: false);}",
		  "template<class T1,class T2>bool updmin(T1&l,T2 r){return (l>r?(l=r),true: false);}",
		  "const int inf = (int)1e9 + 7;",
		  "const ll linf = (ll)4e18 + 7;",
		  "",
		  "/*요약: 문제의 본질을 본다",
		  "$0",
		  "*/",
		  "const int N = 7 + 1e5, mod = (int)1e9 + 7;",
		  "",
		  "void _main(){",
		  "    ",
		  "}",
		  "",
		  "signed main(){",
		  "    cin.tie(0)->sync_with_stdio(0);",
		  "    cin.exceptions(ios::badbit | ios::failbit);",
		  "    // cout<<fixed<<setprecision(15);",
		  "    int tc = 1;",
		  "    // cin >> tc;",
		  "    for(cur_tc=1;cur_tc<=tc;++cur_tc) _main();",
		  "    return 0;",
		  "}",
		  "// https://github.com/Pentagon03/Algorithms",
		],
		"description": "solve"
	},
	"C++ vectorization (ofast)": {
	  "prefix": "ofast",
	  "scope": "cpp",
	  "body": [
		"#pragma GCC optimize(3)",
		"#pragma GCC optimize(\"Ofast,unroll-loops\")",
		"#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt\")"
	  ],
	  "description": "C++ vectorization"
	},
	"stack pregma hack": {
	  "prefix": "stackpragma",
	  "scope": "cpp",
	  "body": [
		"#pragma comment(linker, \"/stack:102400000,102400000\")"
	  ],
	  "description": "C++ vectorization"
	},
	"stack hack": {
	  "prefix": "stackhack",
	  "scope":"cpp",
	  "body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"void main_() {",
		"    // implement your solution here",
		"}",
		"static void run_with_stack_size(void (*func)(void), size_t stsize) {",
		"    char *stack, *send;",
		"    stack = (char *)malloc(stsize);",
		"    send = stack + stsize - 16;",
		"    send = (char *)((uintptr_t)send / 16 * 16);",
		"    asm volatile(",
		"        \"mov %%rsp, (%0)\\n\"",
		"        \"mov %0, %%rsp\\n\"",
		"        :",
		"        : \"r\"(send));",
		"    func();",
		"    asm volatile(\"mov (%0), %%rsp\\n\" : : \"r\"(send));",
		"    free(stack);",
		"}",
		"int main() {",
		"    run_with_stack_size(main_, 1024 * 1024 * 1024); // run with a 1 GiB stack",
		"    return 0;",
		"}"
	  ],
	  "description": "stack hack"
	},
	"Python solve": {
	  "prefix": "solve",
	  "scope": "python",
	  "body": [
		"from sys import stdin, stdout, exit",
		"RS = lambda:stdin.readline().rstrip()",
		"RI = lambda:int(RS())",
		"RL = lambda:list(map(int,RS().split()))",
		"RLL = lambda n: [RI() for _ in range(n)]",
		"PI = lambda x:stdout.write(str(x)+'\\n')",
		"INF = 10**9",
		"EPS = 1e-9",
		"MOD = 10**9 + 7",
		"",
		"'''Solution",
		"https://acmicpc.net/problem/${TM_FILENAME_BASE}",
		"${0}",
		"'''",
		"",
		"def solve():",
		"    ",
		"    return",
		"",
		"def main():",
		"    TC = 1 ",
		"    # TC = RI()",
		"    for _ in range(TC):",
		"        solve()",
		"",
		"if __name__ == \"__main__\":",
		"    main()"
	  ],
	  "description": "Python solve"
	},
	"grader": {
	  "prefix": "grader",
	  "scope": "python",
	  "body": [
		"import os",
		"i = 1",
		"while True:",
		"    print(i)",
		"    file_name = \"\"",
		"    if os.system(f'.\\\\{file_name}_gen {i} > {file_name}_in'): break",
		"    if os.system(f'.\\\\{file_name} < {file_name}_in > {file_name}_my'): break",
		"    if os.system(f'.\\\\{file_name}_ok < {file_name}_in > {file_name}_you'): break",
		"    if open(f'{file_name}_my').read() != open(f'{file_name}_you').read():",
		"        break",
		"    i += 1"
	],
	"description": "grader"
	},
}